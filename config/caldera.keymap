#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/pointing.h>

// #define ZMK_POINTING_DEFAULT_MOVE_VAL 1500  // default: 600
// #define ZMK_POINTING_DEFAULT_SCRL_VAL 20    // default: 10

/ {
        keymap {
                compatible = "zmk,keymap";

                default_layer {
// ---------------------------------------------------------------------------------
// |   `  |  1  |  2  |  3  |  4  |  5  |     |  6  |  7  |  8  |  9  |  0  | BKSP |
// |  TAB |  Q  |  W  |  E  |  R  |  T  |     |  Y  |  U  |  I  |  O  |  P  |  \   |
// | CAPS |  A  |  S  |  D  |  F  |  G  |     |  H  |  J  |  K  |  L  |  ;  |  ENT |
// | SHFT |  Z  |  X  |  C  |  V  |  B  |     |  N  |  M  |  ,  |  .  |  /  | APOS |
// | CTRL | ALT | GUI | SPC | LOW2 | SPC |    | SPC | LOW1|LARW |DARW |UARW | RARW |
                        bindings = <
   &kp GRAVE    &kp N1    &kp N2    &kp N3     &kp N4     &kp N5               &kp N6     &kp N7  &kp N8     &kp N9    &kp N0    &kp BSPC
   &kp TAB      &kp Q     &kp W     &kp E      &kp R      &kp T                &kp Y      &kp U   &kp I      &kp O     &kp P     &kp BSLH
   &lt 2 CAPS   &kp A     &kp S     &kp D      &kp F      &kp G                &kp H      &kp J   &kp K      &kp L     &kp SEMI  &kp RET
   &kp LSHFT    &kp Z     &kp X     &kp C      &kp V      &kp B                &kp N      &kp M   &kp COMMA  &kp DOT   &kp FSLH  &kp APOS
   &kp LCTRL    &kp LALT  &kp LGUI  &kp SPACE  &kp LALT   &kp LGUI             &kp SPACE  &mo 1   &kp LARW   &kp DARW  &kp UARW  &kp RARW
                        >;
                };
                first_layer {
// ------------------------------------------------------------------------------------------------------------
// |  ESC  |  BT1  |  BT2  |  BT3  |  BT4  |  BT5        |                                     | C_VOL_UP | C_VOL_DN |       |           |              | BTCLR |
// |       |       |       |       |       | KP_MULTIPLY |                                     | KP_MINUS | LBKT     | RBKT  |           |              |       |
// |       |   DEL |       |       |       | KP_DIVIDE   |                                     | KP_PLUS  | LBRC     | RBRC  | KP_EQUAL  |  BKSP        |       |
// |       |       |       |       |       |             |                                     |  HOME    | LPAR     | RPAR  | LESS_THAN | GREATER_THAN |  END  |
                        bindings = <
   &kp ESC   &bt BT_SEL 0   &bt BT_SEL 1   &bt BT_SEL 2   &bt BT_SEL 3   &bt BT_SEL 4           &kp VOLUME_UP    &kp VOLUME_DOWN    &trans      &trans          &trans           &bt BT_CLR
   &trans    &trans         &trans         &trans         &trans         &kp MULTIPLY           &kp MINUS        &kp LBKT           &kp RBKT    &trans          &trans           &trans
   &trans    &kp DEL        &trans         &kp LPAR       &kp RPAR       &kp DIVIDE             &kp PLUS         &kp LBRC           &kp RBRC    &kp EQUAL       &kp BKSP         &trans
   &trans    &trans         &trans         &trans         &trans         &trans                 &kp HOME         &kp LPAR           &kp RPAR    &trans          &trans           &kp END
                        >;
                };
                second_layer {
// ------------------------------------------------------------------------------------------------------------
// |  ESC       |  BT1  |  BT2  |  BT3  |  BT4  |  BT5        |                                     | C_VOL_UP | C_VOL_DN |       |           |              | BTCLR |
// |            |       |       |       |       | KP_MULTIPLY |                                     | KP_MINUS | LBKT     | RBKT  |           |              |       |
// |  HOLD+MOD2     |   DEL |       |       |       | KP_DIVIDE   |                                     | KP_PLUS  | LBRC     | RBRC  | KP_EQUAL  |  BKSP        |       |
// |            |       |       |       |       |             |                                     |  HOME    | LPAR     | RPAR  | LESS_THAN | GREATER_THAN |  END  |
                        bindings = <
    &trans      &trans    &trans           &trans         &trans          &trans                        &trans         &trans        &trans          &trans       &trans        &trans
    &trans      &trans    &mkp LCLK        &mkp MCLK      &mkp RCLK       &trans                        &trans         &kp LARW      &kp DARW        &kp UARW     &kp RARW      &trans
    &trans      &trans    &mkp MOVE_LEFT   &mkp MOVE_DOWN &mkp MOVE_UP    &mkp MOVE_RIGHT               &trans         &trans        &trans          &trans       &trans        &trans
    &trans      &trans    &mkp SCRL_LEFT   &mkp SCRL_DOWN &mkp SCRL_UP    &mkp SCRL_RIGHT               &trans         &trans        &trans          &trans       &trans        &trans
                        >;
                };
        };
};

